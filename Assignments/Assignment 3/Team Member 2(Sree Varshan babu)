from google.colab import drive
drive.mount('/content/drive')
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Convolution2D,MaxPooling2D,Flatten,Dense
from tensorflow.keras.preprocessing.image import ImageDataGenerator as idm
import numpy as np
# Creating augmentation on training variable
train_flowers=idm(rescale=1./255,zoom_range=0.2,horizontal_flip=True)

# Passing training data to train variable
Xtrain = train_flowers.flow_from_directory('/content/drive/MyDrive/IBM PROJECT/Assignment 3 /Flowers-Dataset/flowers')

# Creating augmentation on testing variable
test_flowers=idm(rescale=1./255)

# Passing testing data to test variable
Xtest = test_flowers.flow_from_directory('/content/drive/MyDrive/IBM PROJECT/Assignment 3 /Flowers-Dataset/flowers',target_size=(76,76),class_mode='cat
Flower_model = Sequential()
Flower_model.add(Convolution2D(32,(3,3),activation='relu',input_shape=(76,76,3)))
Flower_model.add(MaxPooling2D(pool_size=(2,2)))
Flower_model.add(Flatten())
Flower_model.add(Dense(300,activation='relu'))
Flower_model.add(Dense(150,activation='relu'))
Flower_model.add(Dense(5,activation='softmax'))
Flower_model.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'])
Flower_model.fit(Xtrain,steps_per_epoch= len (Xtrain),epochs= 8,validation_data=Xtest,validation_steps= len (Xtest))
Flower_model.save('Flower.h5')
from tensorflow.keras.preprocessing import image
test_img=image.load_img('/content/drive/MyDrive/IBM PROJECT/Assignment 3 /Flowers-Dataset/flowers/rose/10090824183_d02c613f10_m.jpg',target_size=(76,76))
test_img
x=image.img_to_array(test_img)
x=np.expand_dims(x,axis=0)
predicted=np.argmax(Flower_model.predict(x))
Prediction_category=['daisy','dandelion','rose','sunflower','tulip']
Prediction_category[predicted]
test_img1=image.load_img('/content/drive/MyDrive/IBM PROJECT/Assignment 3 /Flowers-Dataset/flowers/dandelion/10200780773_c6051a7d71_n.jpg',target_size=(76,76))
test_img1
x=image.img_to_array(test_img1)
x=np.expand_dims(x,axis=0)
predicted=np.argmax(Flower_model.predict(x))
Prediction_category[predicted]
